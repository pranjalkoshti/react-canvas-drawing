[{"/home/pranjal/work/packages/react-canvas-drawing/src/index.js":"1","/home/pranjal/work/packages/react-canvas-drawing/src/App.js":"2","/home/pranjal/work/packages/react-canvas-drawing/src/reportWebVitals.js":"3","/home/pranjal/work/packages/react-canvas-drawing/src/components/index.js":"4","/home/pranjal/work/packages/react-canvas-drawing/src/components/drawing.js":"5","/home/pranjal/work/packages/react-canvas-drawing/src/components/shapes/square.js":"6","/home/pranjal/work/packages/react-canvas-drawing/src/components/shapes/circle.js":"7","/home/pranjal/work/packages/react-canvas-drawing/src/components/shapes/line.js":"8"},{"size":478,"mtime":1609515481910,"results":"9","hashOfConfig":"10"},{"size":2581,"mtime":1632125767945,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1609496380825,"results":"12","hashOfConfig":"10"},{"size":1608,"mtime":1632125749562,"results":"13","hashOfConfig":"10"},{"size":7843,"mtime":1631078888954,"results":"14","hashOfConfig":"10"},{"size":1908,"mtime":1631077163635,"results":"15","hashOfConfig":"10"},{"size":2051,"mtime":1631077148391,"results":"16","hashOfConfig":"10"},{"size":1931,"mtime":1631077179567,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"emlid4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/pranjal/work/packages/react-canvas-drawing/src/index.js",[],["36","37"],"/home/pranjal/work/packages/react-canvas-drawing/src/App.js",["38"],"/home/pranjal/work/packages/react-canvas-drawing/src/reportWebVitals.js",[],"/home/pranjal/work/packages/react-canvas-drawing/src/components/index.js",["39","40","41","42","43"],"/home/pranjal/work/packages/react-canvas-drawing/src/components/drawing.js",["44","45","46","47","48","49","50","51","52","53","54","55","56","57"],"import Square from './shapes/square'\nimport Circle from './shapes/circle'\nimport Line from './shapes/line'\n\n\nclass Drawing {\n    constructor() {\n        this.state = {\n            canvas: null,\n            dragStartLocation: null,\n            snapshot: null,\n            dragging: false,\n            shapes:[],\n            currentShape:null,\n            is_touch_device : 'ontouchstart' in document.documentElement,\n            settings: {\n                fillBox: false,\n                shape: 'line', //circle, square, line, ellipse, rect, polygon\n                xor: false,\n                polygonSides: null,\n                polygonAngle: null,\n                lineCap: 'round',\n                textInput: '',\n                fillColor: '#4c5685',\n                lineWidth: 5,\n                lineJoin: 'round',\n                canvasFillColor:'#fff'\n            }\n        }\n    }\n\n    cursorInRect = (mouseX, mouseY, rectX, rectY, rectW, rectH) => {\n        let xLine = mouseX > rectX && mouseX < rectX + rectW\n        let yLine = mouseY > rectY && mouseY < rectY + rectH\n    \n        return xLine && yLine\n    }\n    \n\n    redrawCanvas=()=>{\n        const { canvas, settings, shapes } = this.state;\n     \n        let context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height)\n\n        if(settings.canvasFillColor){\n            context.fillStyle = settings.canvasFillColor\n        }\n        shapes.forEach(e => {\n            if(e.instance){\n                e.instance.draw(context)\n            }\n        })\n    }\n\n    updateSettings = (settings) => {\n        this.state.settings = { ...this.state.settings, ...settings }\n        const { canvas } = this.state;\n    }\n\n\n    //get mouse position\n    getPosition=(mouseEvent)=> {\n        const { canvas } = this.state;\n        var rect = canvas.getBoundingClientRect();\n        let factorX = rect.width / canvas.width\n        let factorY = rect.height / canvas.height\n        return {\n            x: (mouseEvent.clientX - rect.left) / factorX,\n            y: (mouseEvent.clientY - rect.top) / factorY\n        };\n    }\n\n    updatesShapesArr=()=>{\n        let arr = [...this.state.shapes]\n        if(this.state.currentShape){\n            arr.push(this.state.currentShape)\n            this.state.shapes = arr;\n            this.state.currentShape = null\n\n        }\n    }\n\n    eraseCanvas = () => {\n        const { canvas } = this.state;\n        let context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.state.shapes = []\n        if(this.onClear){\n            this.onClear()\n        }\n    }\n\n    // // write on canvas\n    // writeCanvas = () => {\n    //     const { canvas, textInput } = this.state;\n    //     let context = canvas.getContext('2d');\n    //     context.font = '55px Impact';\n    //     context.fillText(textInput, 25, 175);\n    // }\n\n   \n    handleMouseMove=(e)=>{\n        const { canvas, shapes } = this.state;\n        var position = this.getPosition(e, canvas);\n\n        // tell the browser we're handling this event\n        e.preventDefault();\n        e.stopPropagation();\n      \n        let arr = shapes.map(e => this.cursorInRect(position.x, position.y, e.x, e.y, e.width, e.height))\n        if(!arr.every(e => e === false)){\n            canvas.style.cursor = 'pointer'\n        }else{\n            canvas.style.cursor = 'default'\n        }\n    \n        shapes.forEach(e => {\n            if (e.selected) {\n                e.x = position.x - e.offset.x\n                e.y = position.y - e.offset.y\n            }\n            this.cursorInRect(position.x, position.y, e.x, e.y, e.edge, e.edge) ?\n                e.active != true ? e.instance.activate() : e.active = false\n                : e.active = false\n        })\n    }\n\n    handleMouseDown=(mouseEvent)=>{\n        const { canvas, settings } = this.state;\n        let context = canvas.getContext('2d');\n        var position = this.getPosition(mouseEvent, canvas);\n        this.state.dragStartLocation = position;\n        // attach event handlers\n        canvas.addEventListener('mousemove', this.drawShape)\n        canvas.addEventListener('mouseup', this.finishDrawing)\n        canvas.addEventListener('mouseout', this.finishDrawing)\n    }\n\n    drawShape=(mouseEvent)=>{\n        const { canvas, settings } = this.state;\n        const { fillBox, shape, xor,lineWidth,fillColor, polygonSides, polygonAngle, lineCap } = settings;\n        let context = canvas.getContext('2d');\n        var position = this.getPosition(mouseEvent, canvas);\n        if(!shape){\n            return\n        }\n        if (lineWidth) {\n            context.lineWidth = lineWidth;\n        }\n        if (fillColor) {\n            context.strokeStyle = fillColor;\n        }\n        if(lineCap){\n            context.lineCap = lineCap;\n        }\n        if(shape == 'freehand'){\n            this.drawLine1(position)\n        }\n        if(shape == 'line'){\n            this.drawLine1(position)\n        }\n        if(shape == 'circle'){\n            this.drawCircle1(position)\n        }\n        if(shape == 'rect'){\n            this.drawRect1(position)\n        }\n \n    }\n\n    drawLine1=(position)=>{\n        const { canvas, dragStartLocation, settings } = this.state;\n        let context = canvas.getContext('2d');\n        this.redrawCanvas()\n        let line = new Line(dragStartLocation, position, settings)\n        line.draw(context)\n        // context.closePath();\n        this.state.currentShape = {type:'line', start:{x: dragStartLocation.x, y: dragStartLocation.y}, end: { x: position.x, y: position.y }, \n        isDragging: false, instance : line}\n    }\n\n    drawCircle1=(position)=>{\n        const { canvas, dragStartLocation, settings } = this.state;\n        let context = canvas.getContext('2d');\n        this.redrawCanvas()\n        // context.moveTo(dragStartLocation.x, dragStartLocation.y);\n        var radius = Math.sqrt(Math.pow((dragStartLocation.x - position.x), 2) + Math.pow((dragStartLocation.y - position.y), 2));\n        let circle = new Circle(dragStartLocation.x, dragStartLocation.y, radius, 0, 2*Math.PI, settings)\n        circle.draw(context)\n        // context.closePath();\n        this.state.currentShape = {type:'circle', x: dragStartLocation.x, y: dragStartLocation.y, radius: radius, sAngle: 0, eAngle: 2*Math.PI, isDragging: false,\n        instance: circle}\n    }\n\n    drawRect1=(position)=>{\n        const { canvas, dragStartLocation, settings, prevPosition } = this.state;\n        let context = canvas.getContext('2d');\n        this.redrawCanvas()\n        // context.moveTo(dragStartLocation.x, dragStartLocation.y);\n        var w = position.x - dragStartLocation.x;\n        var h = position.y - dragStartLocation.y;\n        let square = new Square(dragStartLocation.x, dragStartLocation.y, w, h, settings)\n        square.draw(context)\n        // context.closePath();\n        this.state.currentShape = {type:'square', x: dragStartLocation.x, y: dragStartLocation.y, width: w, height: h, isDragging: false, \n            instance: square }\n    }\n\n    finishDrawing=(mouseEvent)=> {\n        this.redrawCanvas()\n        const { canvas, shapes } = this.state;\n        let context = canvas.getContext('2d');\n        // draw the line to the finishing coordinates\n        this.drawShape(mouseEvent, canvas, context);\n        this.updatesShapesArr()\n        // unbind any events which could draw\n        canvas.removeEventListener(\"mousemove\", this.drawShape);\n        canvas.addEventListener('mousemove', this.handleMouseMove)\n        canvas.removeEventListener(\"mouseup\", this.finishDrawing);\n        canvas.removeEventListener(\"mouseout\", this.finishDrawing);\n    }\n\n\n    addEventListeners = (canvas) => {\n        this.state.canvas = canvas;\n        canvas.addEventListener('mousedown', this.handleMouseDown)\n    }\n}\n\nexport default Drawing","/home/pranjal/work/packages/react-canvas-drawing/src/components/shapes/square.js",[],"/home/pranjal/work/packages/react-canvas-drawing/src/components/shapes/circle.js",[],"/home/pranjal/work/packages/react-canvas-drawing/src/components/shapes/line.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":44,"column":8,"nodeType":"64","endLine":44,"endColumn":18,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":9,"column":29,"nodeType":"68","messageId":"69","endLine":9,"endColumn":49},{"ruleId":"62","severity":1,"message":"70","line":13,"column":6,"nodeType":"64","endLine":13,"endColumn":22,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":16,"column":24,"nodeType":"74","messageId":"75","endLine":16,"endColumn":26},{"ruleId":"62","severity":1,"message":"70","line":19,"column":6,"nodeType":"64","endLine":19,"endColumn":23,"suggestions":"76"},{"ruleId":"62","severity":1,"message":"70","line":23,"column":6,"nodeType":"64","endLine":23,"endColumn":8,"suggestions":"77"},{"ruleId":"66","severity":1,"message":"78","line":58,"column":17,"nodeType":"68","messageId":"69","endLine":58,"endColumn":23},{"ruleId":"72","severity":1,"message":"79","line":124,"column":26,"nodeType":"74","messageId":"75","endLine":124,"endColumn":28},{"ruleId":"66","severity":1,"message":"80","line":130,"column":25,"nodeType":"68","messageId":"69","endLine":130,"endColumn":33},{"ruleId":"66","severity":1,"message":"81","line":131,"column":13,"nodeType":"68","messageId":"69","endLine":131,"endColumn":20},{"ruleId":"66","severity":1,"message":"82","line":142,"column":17,"nodeType":"68","messageId":"69","endLine":142,"endColumn":24},{"ruleId":"66","severity":1,"message":"83","line":142,"column":33,"nodeType":"68","messageId":"69","endLine":142,"endColumn":36},{"ruleId":"66","severity":1,"message":"84","line":142,"column":58,"nodeType":"68","messageId":"69","endLine":142,"endColumn":70},{"ruleId":"66","severity":1,"message":"85","line":142,"column":72,"nodeType":"68","messageId":"69","endLine":142,"endColumn":84},{"ruleId":"72","severity":1,"message":"73","line":157,"column":18,"nodeType":"74","messageId":"75","endLine":157,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":160,"column":18,"nodeType":"74","messageId":"75","endLine":160,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":163,"column":18,"nodeType":"74","messageId":"75","endLine":163,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":166,"column":18,"nodeType":"74","messageId":"75","endLine":166,"endColumn":20},{"ruleId":"66","severity":1,"message":"86","line":197,"column":54,"nodeType":"68","messageId":"69","endLine":197,"endColumn":66},{"ruleId":"66","severity":1,"message":"87","line":212,"column":25,"nodeType":"68","messageId":"69","endLine":212,"endColumn":31},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'canvasInstance'. Either include it or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'setDrawingController' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'DrawingController'. Either include it or remove the dependency array.",["91"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["92"],["93"],"'canvas' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'settings' is assigned a value but never used.","'context' is assigned a value but never used.","'fillBox' is assigned a value but never used.","'xor' is assigned a value but never used.","'polygonSides' is assigned a value but never used.","'polygonAngle' is assigned a value but never used.","'prevPosition' is assigned a value but never used.","'shapes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [canvasInstance, settings]",{"range":"102","text":"103"},"Update the dependencies array to be: [DrawingController, props.settings]",{"range":"104","text":"105"},"Update the dependencies array to be: [DrawingController, props.clearFlag]",{"range":"106","text":"107"},"Update the dependencies array to be: [DrawingController]",{"range":"108","text":"109"},[1080,1090],"[canvasInstance, settings]",[322,338],"[DrawingController, props.settings]",[443,460],"[DrawingController, props.clearFlag]",[544,546],"[DrawingController]"]