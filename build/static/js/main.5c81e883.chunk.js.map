{"version":3,"sources":["components/shapes/square.js","components/shapes/circle.js","components/shapes/line.js","components/drawing.js","components/index.js","App.js","reportWebVitals.js","index.js"],"names":["Square","x","y","width","height","settings","this","edge","color","fillColor","lineWidth","selected","active","activeColor","replace","str","match","activeColor2","context","strokeStyle","beginPath","strokeRect","Circle","radius","sAngle","eAngle","arc","stroke","Line","start","end","moveTo","lineTo","Drawing","cursorInRect","mouseX","mouseY","rectX","rectY","rectW","rectH","redrawCanvas","state","canvas","shapes","getContext","clearRect","canvasFillColor","fillStyle","forEach","e","instance","draw","updateSettings","getPosition","mouseEvent","rect","getBoundingClientRect","factorX","factorY","clientX","left","clientY","top","updatesShapesArr","arr","currentShape","push","eraseCanvas","onClear","handleMouseMove","position","preventDefault","stopPropagation","map","every","style","cursor","offset","activate","handleMouseDown","dragStartLocation","addEventListener","drawShape","finishDrawing","shape","fillBox","xor","lineCap","polygonSides","polygonAngle","drawLine1","drawCircle1","drawRect1","line","type","isDragging","Math","sqrt","pow","circle","PI","prevPosition","w","h","square","removeEventListener","addEventListeners","snapshot","dragging","is_touch_device","document","documentElement","textInput","lineJoin","ReactCanvas","props","useRef","useState","DrawingController","useEffect","clearFlag","current","onDrawActionEnd","ref","id","canvasStyle","Canvas","data","updateCanvas","clearCanvas","settingsListener","App","setsettings","setclearFlag","canvasInstance","setcanvasInstance","canvasObj","obj","onChange","target","value","step","min","max","class","onClick","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c81e883.chunk.js","sourcesContent":["class Square {\n    constructor(x, y, width, height, settings) {\n    \n        this.x = x\n        this.y = y\n        this.edge = width\n        this.width = width\n        this.height = height\n        this.color = settings.fillColor\n        this.lineWidth = settings.lineWidth\n        this.selected = false\n        this.active = false\n        this.activeColor = settings.fillColor.replace(/,\\d\\d%\\)/, str => str.replace(/\\d\\d/, str.match(/\\d\\d/)[0] * 0.7))\n        this.activeColor2 = settings.fillColor.replace(/,\\d\\d%\\)/, str => str.replace(/\\d\\d/, str.match(/\\d\\d/)[0] * 0.6))\n\n    }\n    draw(context) {\n        // context.fillStyle = this.color\n        context.strokeStyle = this.color;\n        context.lineWidth = this.lineWidth;\n        context.beginPath();\n        if (this.active) {\n            // context.fillStyle = this.activeColor;\n            // context.save()\n            // context.setLineDash([10, 5, 30, 5])\n            // context.beginPath()\n            // context.moveTo(this.x, this.y)\n            // context.lineTo(0, this.y)\n            // context.moveTo(this.x, this.y)\n            // context.lineTo(this.x, 0)\n            // context.moveTo(this.x, this.y)\n            // context.closePath()\n            // context.lineWidth = 0.5\n            // context.strokeStyle = this.activeColor\n            // context.stroke()\n            // drawCoords(context, this.x, this.y, this.activeColor)\n            // context.restore()\n        }\n        context.strokeRect(this.x, this.y, this.width, this.height)\n        if (this.selected) {\n            context.lineWidth = 2;\n            context.strokeStyle = this.activeColor2\n            context.strokeRect(this.x, this.y, this.width, this.height)\n        }\n    }\n    update() {\n        this.x += 0.1\n    }\n\n    select() {\n        this.selected = !this.selected\n    }\n\n    activate() {\n        this.active = !this.active\n    }\n}\n\nexport default Square;","class Circle {\n    constructor(x, y, radius, sAngle, eAngle, settings) {\n    \n        this.x = x\n        this.y = y\n        this.radius = radius\n        this.sAngle = sAngle\n        this.eAngle = eAngle\n        this.color = settings.fillColor\n        this.lineWidth = settings.lineWidth\n        this.selected = false\n        this.active = false\n        this.activeColor = settings.fillColor.replace(/,\\d\\d%\\)/, str => str.replace(/\\d\\d/, str.match(/\\d\\d/)[0] * 0.7))\n        this.activeColor2 = settings.fillColor.replace(/,\\d\\d%\\)/, str => str.replace(/\\d\\d/, str.match(/\\d\\d/)[0] * 0.6))\n\n    }\n    draw(context) {\n        // context.fillStyle = this.color\n        context.strokeStyle = this.color;\n        context.lineWidth = this.lineWidth;\n        context.beginPath();\n        if (this.active) {\n            // context.fillStyle = this.activeColor;\n            // context.save()\n            // context.setLineDash([10, 5, 30, 5])\n            // context.beginPath()\n            // context.moveTo(this.x, this.y)\n            // context.lineTo(0, this.y)\n            // context.moveTo(this.x, this.y)\n            // context.lineTo(this.x, 0)\n            // context.moveTo(this.x, this.y)\n            // context.closePath()\n            // context.lineWidth = 0.5\n            // context.strokeStyle = this.activeColor\n            // context.stroke()\n            // drawCoords(context, this.x, this.y, this.activeColor)\n            // context.restore()\n        }\n        context.arc(this.x, this.y, this.radius, this.sAngle, this.eAngle, false)\n        // context.arc(this.x, this.y, 75, 0, 2 * Math.PI, false)\n\n        // if (this.selected) {\n        //     context.lineWidth = 2;\n        //     context.strokeStyle = this.activeColor2\n        //     context.arc(this.x, this.y, this.radius, this.sAngle, this.eAngle)\n        // }\n        context.stroke();\n    }\n    update() {\n        this.x += 0.1\n    }\n\n    select() {\n        this.selected = !this.selected\n    }\n\n    activate() {\n        this.active = !this.active\n    }\n}\n\nexport default Circle;","class Line {\n    constructor(start, end, settings) {\n    \n        this.start = start\n        this.end = end\n        this.color = settings.fillColor\n        this.lineWidth = settings.lineWidth\n        this.selected = false\n        this.active = false\n        this.activeColor = settings.fillColor.replace(/,\\d\\d%\\)/, str => str.replace(/\\d\\d/, str.match(/\\d\\d/)[0] * 0.7))\n        this.activeColor2 = settings.fillColor.replace(/,\\d\\d%\\)/, str => str.replace(/\\d\\d/, str.match(/\\d\\d/)[0] * 0.6))\n\n    }\n    draw(context) {\n        // context.fillStyle = this.color\n        context.strokeStyle = this.color;\n        context.lineWidth = this.lineWidth;\n        context.beginPath();\n        if (this.active) {\n            // context.fillStyle = this.activeColor;\n            // context.save()\n            // context.setLineDash([10, 5, 30, 5])\n            // context.beginPath()\n            // context.moveTo(this.x, this.y)\n            // context.lineTo(0, this.y)\n            // context.moveTo(this.x, this.y)\n            // context.lineTo(this.x, 0)\n            // context.moveTo(this.x, this.y)\n            // context.closePath()\n            // context.lineWidth = 0.5\n            // context.strokeStyle = this.activeColor\n            // context.stroke()\n            // drawCoords(context, this.x, this.y, this.activeColor)\n            // context.restore()\n        }\n        context.moveTo(this.start.x, this.start.y);\n        context.lineTo(this.end.x, this.end.y);\n        context.stroke();\n        // if (this.selected) {\n        //     context.lineWidth = 2;\n        //     context.strokeStyle = this.activeColor2\n        //     context.arc(this.x, this.y, this.radius, this.sAngle, this.eAngle)\n        // }\n        context.stroke();\n    }\n    update() {\n        this.x += 0.1\n    }\n\n    select() {\n        this.selected = !this.selected\n    }\n\n    activate() {\n        this.active = !this.active\n    }\n}\n\nexport default Line;","import Square from './shapes/square'\nimport Circle from './shapes/circle'\nimport Line from './shapes/line'\n\n\nclass Drawing {\n    constructor() {\n        this.state = {\n            canvas: null,\n            dragStartLocation: null,\n            snapshot: null,\n            dragging: false,\n            shapes:[],\n            currentShape:null,\n            is_touch_device : 'ontouchstart' in document.documentElement,\n            settings: {\n                fillBox: false,\n                shape: 'line', //circle, square, line, ellipse, rect, polygon\n                xor: false,\n                polygonSides: null,\n                polygonAngle: null,\n                lineCap: 'round',\n                textInput: '',\n                fillColor: '#4c5685',\n                lineWidth: 5,\n                lineJoin: 'round',\n                canvasFillColor:'#fff'\n            }\n        }\n    }\n\n    cursorInRect = (mouseX, mouseY, rectX, rectY, rectW, rectH) => {\n        let xLine = mouseX > rectX && mouseX < rectX + rectW\n        let yLine = mouseY > rectY && mouseY < rectY + rectH\n    \n        return xLine && yLine\n    }\n    \n\n    redrawCanvas=()=>{\n        const { canvas, settings, shapes } = this.state;\n     \n        let context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height)\n\n        if(settings.canvasFillColor){\n            context.fillStyle = settings.canvasFillColor\n        }\n        shapes.forEach(e => {\n            if(e.instance){\n                e.instance.draw(context)\n            }\n        })\n    }\n\n    updateSettings = (settings) => {\n        this.state.settings = { ...this.state.settings, ...settings }\n        const { canvas } = this.state;\n    }\n\n\n    //get mouse position\n    getPosition=(mouseEvent)=> {\n        const { canvas } = this.state;\n        var rect = canvas.getBoundingClientRect();\n        let factorX = rect.width / canvas.width\n        let factorY = rect.height / canvas.height\n        return {\n            x: (mouseEvent.clientX - rect.left) / factorX,\n            y: (mouseEvent.clientY - rect.top) / factorY\n        };\n    }\n\n    updatesShapesArr=()=>{\n        let arr = [...this.state.shapes]\n        if(this.state.currentShape){\n            arr.push(this.state.currentShape)\n            this.state.shapes = arr;\n            this.state.currentShape = null\n\n        }\n    }\n\n    eraseCanvas = () => {\n        const { canvas } = this.state;\n        let context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.state.shapes = []\n        if(this.onClear){\n            this.onClear()\n        }\n    }\n\n    // // write on canvas\n    // writeCanvas = () => {\n    //     const { canvas, textInput } = this.state;\n    //     let context = canvas.getContext('2d');\n    //     context.font = '55px Impact';\n    //     context.fillText(textInput, 25, 175);\n    // }\n\n   \n    handleMouseMove=(e)=>{\n        const { canvas, shapes } = this.state;\n        var position = this.getPosition(e, canvas);\n\n        // tell the browser we're handling this event\n        e.preventDefault();\n        e.stopPropagation();\n      \n        let arr = shapes.map(e => this.cursorInRect(position.x, position.y, e.x, e.y, e.width, e.height))\n        if(!arr.every(e => e === false)){\n            canvas.style.cursor = 'pointer'\n        }else{\n            canvas.style.cursor = 'default'\n        }\n    \n        shapes.forEach(e => {\n            if (e.selected) {\n                e.x = position.x - e.offset.x\n                e.y = position.y - e.offset.y\n            }\n            this.cursorInRect(position.x, position.y, e.x, e.y, e.edge, e.edge) ?\n                e.active != true ? e.instance.activate() : e.active = false\n                : e.active = false\n        })\n    }\n\n    handleMouseDown=(mouseEvent)=>{\n        const { canvas, settings } = this.state;\n        let context = canvas.getContext('2d');\n        var position = this.getPosition(mouseEvent, canvas);\n        this.state.dragStartLocation = position;\n        // attach event handlers\n        canvas.addEventListener('mousemove', this.drawShape)\n        canvas.addEventListener('mouseup', this.finishDrawing)\n        canvas.addEventListener('mouseout', this.finishDrawing)\n    }\n\n    drawShape=(mouseEvent)=>{\n        const { canvas, settings } = this.state;\n        const { fillBox, shape, xor,lineWidth,fillColor, polygonSides, polygonAngle, lineCap } = settings;\n        let context = canvas.getContext('2d');\n        var position = this.getPosition(mouseEvent, canvas);\n        if(!shape){\n            return\n        }\n        if (lineWidth) {\n            context.lineWidth = lineWidth;\n        }\n        if (fillColor) {\n            context.strokeStyle = fillColor;\n        }\n        if(lineCap){\n            context.lineCap = lineCap;\n        }\n        if(shape == 'freehand'){\n            this.drawLine1(position)\n        }\n        if(shape == 'line'){\n            this.drawLine1(position)\n        }\n        if(shape == 'circle'){\n            this.drawCircle1(position)\n        }\n        if(shape == 'rect'){\n            this.drawRect1(position)\n        }\n \n    }\n\n    drawLine1=(position)=>{\n        const { canvas, dragStartLocation, settings } = this.state;\n        let context = canvas.getContext('2d');\n        this.redrawCanvas()\n        let line = new Line(dragStartLocation, position, settings)\n        line.draw(context)\n        // context.closePath();\n        this.state.currentShape = {type:'line', start:{x: dragStartLocation.x, y: dragStartLocation.y}, end: { x: position.x, y: position.y }, \n        isDragging: false, instance : line}\n    }\n\n    drawCircle1=(position)=>{\n        const { canvas, dragStartLocation, settings } = this.state;\n        let context = canvas.getContext('2d');\n        this.redrawCanvas()\n        // context.moveTo(dragStartLocation.x, dragStartLocation.y);\n        var radius = Math.sqrt(Math.pow((dragStartLocation.x - position.x), 2) + Math.pow((dragStartLocation.y - position.y), 2));\n        let circle = new Circle(dragStartLocation.x, dragStartLocation.y, radius, 0, 2*Math.PI, settings)\n        circle.draw(context)\n        // context.closePath();\n        this.state.currentShape = {type:'circle', x: dragStartLocation.x, y: dragStartLocation.y, radius: radius, sAngle: 0, eAngle: 2*Math.PI, isDragging: false,\n        instance: circle}\n    }\n\n    drawRect1=(position)=>{\n        const { canvas, dragStartLocation, settings, prevPosition } = this.state;\n        let context = canvas.getContext('2d');\n        this.redrawCanvas()\n        // context.moveTo(dragStartLocation.x, dragStartLocation.y);\n        var w = position.x - dragStartLocation.x;\n        var h = position.y - dragStartLocation.y;\n        let square = new Square(dragStartLocation.x, dragStartLocation.y, w, h, settings)\n        square.draw(context)\n        // context.closePath();\n        this.state.currentShape = {type:'square', x: dragStartLocation.x, y: dragStartLocation.y, width: w, height: h, isDragging: false, \n            instance: square }\n    }\n\n    finishDrawing=(mouseEvent)=> {\n        this.redrawCanvas()\n        const { canvas, shapes } = this.state;\n        let context = canvas.getContext('2d');\n        // draw the line to the finishing coordinates\n        this.drawShape(mouseEvent, canvas, context);\n        this.updatesShapesArr()\n        // unbind any events which could draw\n        canvas.removeEventListener(\"mousemove\", this.drawShape);\n        canvas.addEventListener('mousemove', this.handleMouseMove)\n        canvas.removeEventListener(\"mouseup\", this.finishDrawing);\n        canvas.removeEventListener(\"mouseout\", this.finishDrawing);\n    }\n\n\n    addEventListeners = (canvas) => {\n        this.state.canvas = canvas;\n        canvas.addEventListener('mousedown', this.handleMouseDown)\n    }\n}\n\nexport default Drawing","import React,  { useState, useRef, useEffect } from \"react\";\nimport Drawing from './drawing';\n\n\n\nexport const ReactCanvas = (props)=>{\n  const canvas = useRef(null);\n\n  const [DrawingController, setDrawingController] = useState(new Drawing())\n\n  useEffect(() => {\n    DrawingController.updateSettings(props.settings)\n  }, [props.settings])\n\n  useEffect(() => {\n    if(props.clearFlag == true){\n      DrawingController.eraseCanvas()\n    }\n  }, [props.clearFlag])\n\n  useEffect(() => {\n    DrawingController.addEventListeners(canvas.current)\n  }, [])\n\n\n\n  if(DrawingController && props.onDrawActionEnd){\n    DrawingController.onDrawActionEnd = props.onDrawActionEnd\n  }\n  if(DrawingController && props.onClear){\n    DrawingController.onClear = props.onClear;\n  }\n\n\n  return(\n \n      <canvas ref={canvas} id={props.id ? props.id : \"react-canvas\"} width={props.width ? props.width : 800} height={props.height ? props.height : 1200} style={{...props.canvasStyle}}/>\n   \n  )\n}\n\nexport class Canvas {\n  constructor(data){\n    this.DrawingController = new Drawing()\n    if(this.DrawingController && data.onDrawActionEnd){\n      this.DrawingController.onDrawActionEnd = data.onDrawActionEnd\n    }\n    if(this.DrawingController && data.onClear){\n      this.DrawingController.onClear = data.onClear;\n    }\n    this.DrawingController.addEventListeners(data.canvas)\n  }\n\n  updateCanvas = (canvas)=>{\n    this.DrawingController.addEventListeners(canvas)\n  }\n\n  clearCanvas = () =>{\n    this.DrawingController.eraseCanvas()\n  }\n\n  settingsListener=(settings) =>{\n    this.DrawingController.updateSettings(settings)\n  }\n\n}\n\n\n","import React,  { useEffect, useRef, useState } from \"react\";\nimport { ReactCanvas, Canvas } from './components';\n\nfunction App(props){\n    const canvas = useRef(null);\n    const [settings, setsettings] = useState({\n        shape: 'line', // line, circle, rect\n        fillColor: '#4c5685',\n        lineWidth: 5,\n        canvasFillColor:'#fff'\n    });\n    const [clearFlag, setclearFlag] = useState(false)\n    const [canvasInstance, setcanvasInstance] = useState(false)\n\n\n    useEffect(() => {\n        let canvasObj = new Canvas({\n            canvas: canvas.current,\n            onDrawActionEnd: onDrawActionEnd,\n            onClear: onClear\n        })\n        setcanvasInstance(canvasObj)\n    }, [])\n\n\n    const clearCanvas = ()=>{\n        canvasInstance.clearCanvas()\n    }\n\n    const onDrawActionEnd = () =>{\n        setsettings(obj=>{\n            return {...obj, shape: null}\n        })\n    }\n\n    const onClear = () =>{\n        setclearFlag(false)\n    }\n\n    useEffect(() => {\n        if(canvasInstance){\n            canvasInstance.settingsListener(settings)\n        }\n    }, [settings])\n\n    return (\n        <>\n        <select onChange={(e)=>{\n            setsettings(obj=>{\n                return {...obj, shape: e.target.value}\n            })\n          \n        }}>\n            <option>line</option>\n            {/* <option>square</option> */}\n            <option>circle</option>\n            <option>rect</option>\n\n        </select>\n\n        <input id='fillColor' type='color' step='1' \n            value={settings.fillColor} \n            onChange={(e)=>{\n                setsettings(obj=>{\n                    return {...obj, fillColor: e.target.value}\n                })\n            }}></input>\n\n        <input type=\"range\" min=\"1\" max=\"100\" value={settings.lineWidth} \n            class=\"slider\" \n            id=\"myRange\"\n          onChange={(e)=>{\n            setsettings(obj=>{\n                return {...obj, lineWidth: e.target.value}\n            })\n        }}/>\n\n        <button onClick={()=>{\n            setclearFlag(true)\n            clearCanvas()\n        }}>Clear</button>\n\n        <ReactCanvas \n            width={800} \n            height={1200} \n            canvasStyle={{border:'1px solid grey'}} \n            settings={{...settings}}\n            onDrawActionEnd={onDrawActionEnd}\n            clearFlag={clearFlag}\n            onClear={onClear}\n            id={\"react-canvas-1\"}\n        />\n    <div>\n        <canvas ref={canvas} id=\"react-canvas\" width={500} height={800} style={{border:'1px solid grey'}}/>\n    </div>\n        </>\n    )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}